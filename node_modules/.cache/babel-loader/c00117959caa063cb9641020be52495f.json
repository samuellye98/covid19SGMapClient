{"ast":null,"code":"var _jsxFileName = \"/Users/SamuelDNinja/Downloads/covid19Map/client/src/Map.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './Map.scss';\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer } from './layers';\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nconst api = process.env.REACT_APP_API;\nconsole.log(process.env.REACT_APP_API); // const geolocateStyle = {\n//   float: 'left',\n//   margin: '50px',\n//   padding: '10px',\n// };\n\nfunction Map() {\n  const mapboxElRef = useRef(null);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:9000').then(res => res.json()).then(res => {\n      setData(res);\n    }).catch(console.log);\n  }, []);\n  useEffect(() => {\n    console.log(data, 'data');\n\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        // latitude: 1.3521,\n        // longitude: 103.8198,\n        //   zoom: 10.5,\n        center: [103.8198, 1.3521],\n        // initial geo location\n        zoom: 10.5 // initial zoom\n\n      });\n      map.addControl(new mapboxgl.NavigationControl()); // Call this method when the map is loaded\n\n      map.once('load', function () {\n        // Add our SOURCE\n        // with id \"points\"\n        map.addSource('cases', {\n          type: 'geojson',\n          data: data,\n          cluster: true,\n          clusterRadius: 50\n        }); // Add our layer\n\n        map.addLayer(clusterLayer);\n        map.addLayer(clusterCountLayer);\n        map.addLayer(unclusteredPointLayer);\n      }); // const popup = new mapboxgl.Popup({\n      //   closeButton: false,\n      //   closeOnClick: false,\n      // });\n      // const clusters = [];\n      // data['features'].forEach((e) => {\n      //   if (!clusters.includes(e.cluster)) {\n      //     clusters.push(e.cluster);\n      //   }\n      // });\n      // console.log(clusters);\n      // let lastId;\n      // map.on('mousemove', 'clusters', (e) => {\n      //   // console.log(e);\n      //   const caseNo = e.features[0].properties.caseNo;\n      //   const clusterCount = e.features[0].properties.point_count;\n      //   console.log(clusterCount, e.features[0]);\n      //   // if (id !== lastId) {\n      //   //   lastId = id;\n      //   //   const { cases, deaths, country, province } = e.features[0].properties;\n      //   //   // Change the pointer type on mouseenter\n      //   //   map.getCanvas().style.cursor = 'pointer';\n      //   //   const coordinates = e.features[0].geometry.coordinates.slice();\n      //   //   const countryISO =\n      //   //     lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\n      //   //   const provinceHTML =\n      //   //     province !== 'null' ? `<p>Province: <b>${province}</b></p>` : '';\n      //   //   const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n      //   //   const countryFlagHTML = Boolean(countryISO)\n      //   //     ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n      //   //     : '';\n      //   //   const HTML = `<p>Country: <b>${country}</b></p>\n      //   //       ${provinceHTML}\n      //   //       <p>Cases: <b>${cases}</b></p>\n      //   //       <p>Deaths: <b>${deaths}</b></p>\n      //   //       <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n      //   //       ${countryFlagHTML}`;\n      //   //   // Ensure that if the map is zoomed out such that multiple\n      //   //   // copies of the feature are visible, the popup appears\n      //   //   // over the copy being pointed to.\n      //   //   while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n      //   //     coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      //   //   }\n      //   //   popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\n      //   // }\n      // });\n      // map.on('mouseleave', 'circles', function () {\n      //   lastId = undefined;\n      //   map.getCanvas().style.cursor = '';\n      //   popup.remove();\n      // });\n    }\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mapBox\",\n    ref: mapboxElRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/SamuelDNinja/Downloads/covid19Map/client/src/Map.js"],"names":["React","useRef","useEffect","useState","mapboxgl","clusterLayer","clusterCountLayer","unclusteredPointLayer","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","api","REACT_APP_API","console","log","Map","mapboxElRef","data","setData","fetch","then","res","json","catch","map","container","current","style","center","zoom","addControl","NavigationControl","once","addSource","type","cluster","clusterRadius","addLayer"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './Map.scss';\nimport {\n  clusterLayer,\n  clusterCountLayer,\n  unclusteredPointLayer,\n} from './layers';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nconst api = process.env.REACT_APP_API;\nconsole.log(process.env.REACT_APP_API);\n\n// const geolocateStyle = {\n//   float: 'left',\n//   margin: '50px',\n//   padding: '10px',\n// };\n\nfunction Map() {\n  const mapboxElRef = useRef(null);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('http://localhost:9000')\n      .then((res) => res.json())\n      .then((res) => {\n        setData(res);\n      })\n      .catch(console.log);\n  }, []);\n\n  useEffect(() => {\n    console.log(data, 'data');\n    if (data) {\n      const map = new mapboxgl.Map({\n        container: mapboxElRef.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        // latitude: 1.3521,\n        // longitude: 103.8198,\n        //   zoom: 10.5,\n        center: [103.8198, 1.3521], // initial geo location\n        zoom: 10.5, // initial zoom\n      });\n\n      map.addControl(new mapboxgl.NavigationControl());\n\n      // Call this method when the map is loaded\n      map.once('load', function () {\n        // Add our SOURCE\n        // with id \"points\"\n        map.addSource('cases', {\n          type: 'geojson',\n          data: data,\n          cluster: true,\n          clusterRadius: 50,\n        });\n\n        // Add our layer\n        map.addLayer(clusterLayer);\n        map.addLayer(clusterCountLayer);\n        map.addLayer(unclusteredPointLayer);\n      });\n\n      // const popup = new mapboxgl.Popup({\n      //   closeButton: false,\n      //   closeOnClick: false,\n      // });\n\n      // const clusters = [];\n      // data['features'].forEach((e) => {\n      //   if (!clusters.includes(e.cluster)) {\n      //     clusters.push(e.cluster);\n      //   }\n      // });\n      // console.log(clusters);\n\n      // let lastId;\n\n      // map.on('mousemove', 'clusters', (e) => {\n      //   // console.log(e);\n      //   const caseNo = e.features[0].properties.caseNo;\n      //   const clusterCount = e.features[0].properties.point_count;\n      //   console.log(clusterCount, e.features[0]);\n\n      //   // if (id !== lastId) {\n      //   //   lastId = id;\n      //   //   const { cases, deaths, country, province } = e.features[0].properties;\n\n      //   //   // Change the pointer type on mouseenter\n      //   //   map.getCanvas().style.cursor = 'pointer';\n\n      //   //   const coordinates = e.features[0].geometry.coordinates.slice();\n\n      //   //   const countryISO =\n      //   //     lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\n      //   //   const provinceHTML =\n      //   //     province !== 'null' ? `<p>Province: <b>${province}</b></p>` : '';\n      //   //   const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n      //   //   const countryFlagHTML = Boolean(countryISO)\n      //   //     ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n      //   //     : '';\n\n      //   //   const HTML = `<p>Country: <b>${country}</b></p>\n      //   //       ${provinceHTML}\n      //   //       <p>Cases: <b>${cases}</b></p>\n      //   //       <p>Deaths: <b>${deaths}</b></p>\n      //   //       <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n      //   //       ${countryFlagHTML}`;\n\n      //   //   // Ensure that if the map is zoomed out such that multiple\n      //   //   // copies of the feature are visible, the popup appears\n      //   //   // over the copy being pointed to.\n      //   //   while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n      //   //     coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      //   //   }\n\n      //   //   popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\n      //   // }\n      // });\n\n      // map.on('mouseleave', 'circles', function () {\n      //   lastId = undefined;\n      //   map.getCanvas().style.cursor = '';\n      //   popup.remove();\n      // });\n    }\n  }, [data]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"mapContainer\">\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}