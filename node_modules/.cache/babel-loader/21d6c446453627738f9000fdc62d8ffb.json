{"ast":null,"code":"import _slicedToArray from\"/Users/SamuelDNinja/Downloads/covid19Map/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from'react';import mapboxgl from'mapbox-gl';import'mapbox-gl/dist/mapbox-gl.css';import'./Map.scss';import{clusterLayer,clusterCountLayer,unclusteredPointLayer}from'./layers';mapboxgl.accessToken=process.env.REACT_APP_MAPBOX_TOKEN;var api=process.env.NODE_ENV==='development'?'http://localhost:9000':'https://covid19sgmap.herokuapp.com/';// const geolocateStyle = {\n//   float: 'left',\n//   margin: '50px',\n//   padding: '10px',\n// };\nfunction Map(){var mapboxElRef=useRef(null);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];useEffect(function(){fetch(api).then(function(res){return res.json();}).then(function(res){setData(res);}).catch(console.log);},[]);useEffect(function(){if(data){var map=new mapboxgl.Map({container:mapboxElRef.current,style:'mapbox://styles/mapbox/streets-v11',// latitude: 1.3521,\n// longitude: 103.8198,\n//   zoom: 10.5,\ncenter:[103.8198,1.3521],// initial geo location\nzoom:10.5// initial zoom\n});map.addControl(new mapboxgl.NavigationControl());// Call this method when the map is loaded\nmap.once('load',function(){// Add our SOURCE\n// with id \"points\"\nmap.addSource('cases',{type:'geojson',data:data,cluster:true,clusterRadius:50});// Add our layer\nmap.addLayer(clusterLayer);map.addLayer(clusterCountLayer);map.addLayer(unclusteredPointLayer);});// const popup = new mapboxgl.Popup({\n//   closeButton: false,\n//   closeOnClick: false,\n// });\n// const clusters = [];\n// data['features'].forEach((e) => {\n//   if (!clusters.includes(e.cluster)) {\n//     clusters.push(e.cluster);\n//   }\n// });\n// console.log(clusters);\n// let lastId;\n// map.on('mousemove', 'clusters', (e) => {\n//   // console.log(e);\n//   const caseNo = e.features[0].properties.caseNo;\n//   const clusterCount = e.features[0].properties.point_count;\n//   console.log(clusterCount, e.features[0]);\n//   // if (id !== lastId) {\n//   //   lastId = id;\n//   //   const { cases, deaths, country, province } = e.features[0].properties;\n//   //   // Change the pointer type on mouseenter\n//   //   map.getCanvas().style.cursor = 'pointer';\n//   //   const coordinates = e.features[0].geometry.coordinates.slice();\n//   //   const countryISO =\n//   //     lookup.byCountry(country)?.iso2 || lookup.byInternet(country)?.iso2;\n//   //   const provinceHTML =\n//   //     province !== 'null' ? `<p>Province: <b>${province}</b></p>` : '';\n//   //   const mortalityRate = ((deaths / cases) * 100).toFixed(2);\n//   //   const countryFlagHTML = Boolean(countryISO)\n//   //     ? `<img src=\"https://www.countryflags.io/${countryISO}/flat/64.png\"></img>`\n//   //     : '';\n//   //   const HTML = `<p>Country: <b>${country}</b></p>\n//   //       ${provinceHTML}\n//   //       <p>Cases: <b>${cases}</b></p>\n//   //       <p>Deaths: <b>${deaths}</b></p>\n//   //       <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n//   //       ${countryFlagHTML}`;\n//   //   // Ensure that if the map is zoomed out such that multiple\n//   //   // copies of the feature are visible, the popup appears\n//   //   // over the copy being pointed to.\n//   //   while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n//   //     coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n//   //   }\n//   //   popup.setLngLat(coordinates).setHTML(HTML).addTo(map);\n//   // }\n// });\n// map.on('mouseleave', 'circles', function () {\n//   lastId = undefined;\n//   map.getCanvas().style.cursor = '';\n//   popup.remove();\n// });\n}},[data]);return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mapContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mapBox\",ref:mapboxElRef})));}export default Map;","map":null,"metadata":{},"sourceType":"module"}